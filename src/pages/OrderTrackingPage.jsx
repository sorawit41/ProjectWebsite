// OrderTrackingPage.js
import React, { useState, useEffect } from 'react';
import { supabase } from './supabaseClient'; // Import supabase client

// Helper function to get user-friendly text for verification status
function getVerificationStatusText(status, verificationResult) {
    // **Priority 1: Use the specific verificationResult if available (e.g., "Approved", "Rejected")**
    if (verificationResult) {
        // You might want to map specific values to more user-friendly text here too
        // For example, if verificationResult is "Approved", you might want to return "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
        // For now, it will return the direct value like "Approved"
        if (verificationResult === 'Approved') {
            return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß';
        }
        if (verificationResult === 'Rejected') {
            return '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
        }
        if (verificationResult === 'Pending More Info') {
            return '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
        }
        return verificationResult; // Returns the direct value like "Approved"
    }

    // Priority 2: Fallback to status-based messages if no specific verificationResult
    switch (status) {
        case 'payment_uploaded':
            return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ';
        case 'pending_confirmation':
            return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠';
        case 'payment_verified':
            return '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        case 'payment_rejected':
            return '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠)';
        case 'processing':
            return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'; // This might now be covered by an "Approved" verification_status
        case 'shipped':
            return '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
        case 'completed':
            return '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        case 'cancelled':
            return '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
        default:
            return status || 'N/A';
    }
}


function OrderTrackingPage() {
    const [orders, setOrders] = useState([]);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [selectedOrderItems, setSelectedOrderItems] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        async function fetchOrders() {
            try {
                setIsLoading(true);
                setError(null);

                const { data: { user } } = await supabase.auth.getUser();
                if (!user) {
                    setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
                    setIsLoading(false);
                    return;
                }

                const { data: ordersData, error: ordersError } = await supabase
                    .from('orders')
                    .select('*, orderItemsToInsert, verification_status') // Correctly fetching verification_status
                    .eq('user_id', user.id)
                    .order('created_at', { ascending: false });

                if (ordersError) {
                    console.error("Supabase fetch orders error:", ordersError);
                    throw new Error(ordersError.message || ordersError.error_description);
                }

                setOrders(ordersData || []);

            } catch (err) {
                console.error("Failed to fetch orders:", err);
                setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ: " + err.message);
            } finally {
                setIsLoading(false);
            }
        }

        fetchOrders();
    }, []);

    const handleViewDetails = (orderId) => {
        const order = orders.find(o => o.id === orderId);
        if (order) {
            setSelectedOrder(order);
            try {
                if (order.orderItemsToInsert) {
                    const items = JSON.parse(order.orderItemsToInsert);
                    setSelectedOrderItems(items);
                } else {
                    setSelectedOrderItems([]);
                }
            } catch (parseError) {
                console.error("Failed to parse order items JSON:", parseError);
                setSelectedOrderItems([]);
                setError("‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ");
            }
        }
    };

    const handleBackToList = () => {
        setSelectedOrder(null);
        setSelectedOrderItems([]);
        setError(null);
    };

    if (isLoading) {
        return <div style={{ textAlign: 'center', padding: '20px', paddingTop: '120px' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
    }

    if (error && !selectedOrder) {
         return <div style={{ color: 'red', textAlign: 'center', padding: '20px', paddingTop: '120px' }}>{error}</div>;
    }

    if (selectedOrder) {
        const contactInfo = selectedOrder.contact_info || {};
        // *** üö©‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏™‡πà‡∏á selectedOrder.verification_status ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ***
        const verificationText = getVerificationStatusText(selectedOrder.status, selectedOrder.verification_status);


        return (
            <div
                className="container"
                style={{
                    maxWidth: '800px',
                    margin: '20px auto',
                    padding: '15px',
                    paddingTop: '120px',
                    border: '1px solid #ccc',
                    backgroundColor: '#f9f9f9'
                }}
            >
                <button onClick={handleBackToList} style={{ marginBottom: '20px', padding: '8px 16px', cursor: 'pointer' }}>&lt; ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>
                <h2 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '20px' }}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{selectedOrder.id.substring(0, 8)}</h2>

                <div style={{ marginBottom: '20px' }}>
                    <p><b>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ï‡πá‡∏°:</b> {selectedOrder.id}</p>
                    <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</b> {new Date(selectedOrder.created_at).toLocaleString()}</p>
                    <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å:</b> {selectedOrder.status}</p>
                    <p><b>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</b> {verificationText}</p> {/* <--- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ */}
                    <p><b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</b> {selectedOrder.total_amount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                    <p><b>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</b> {selectedOrder.shipping_address}</p>

                    <p style={{ marginTop: '15px' }}><b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</b></p>
                    <ul style={{ listStyle: 'none', paddingLeft: '0' }}>
                        {contactInfo.name && <li><b>‡∏ä‡∏∑‡πà‡∏≠:</b> {contactInfo.name}</li>}
                        {contactInfo.phone && <li><b>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</b> {contactInfo.phone}</li>}
                        {contactInfo.email && <li><b>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</b> {contactInfo.email}</li>}
                    </ul>

                    {selectedOrder.slip_url && (
                        <div style={{ marginTop: '15px' }}>
                            <p><b>‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</b></p>
                            <p><a href={selectedOrder.slip_url} target="_blank" rel="noopener noreferrer" style={{ color: 'blue', textDecoration: 'underline' }}>‡∏î‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô</a></p>
                        </div>
                    )}
                </div>

                <h3 style={{ borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '15px' }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
                {error && selectedOrder && <p style={{ color: 'red', marginBottom: '10px' }}>{error}</p>}

                {selectedOrderItems.length > 0 ? (
                    <ul style={{ listStyle: 'none', paddingLeft: '0' }}>
                        {selectedOrderItems.map((item, index) => (
                            <li key={index} style={{ border: '1px solid #ddd', padding: '10px', marginBottom: '10px', backgroundColor: '#fff' }}>
                                <p style={{ margin: '0 0 5px 0' }}><b>{item.productName}</b> - {item.optionName}</p>
                                <p style={{ margin: '0 0 5px 0', fontSize: '0.9em', color: '#555' }}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity} x {item.price.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                                <p style={{ margin: '0 0 5px 0', fontSize: '0.9em', color: '#555' }}>‡∏£‡∏ß‡∏°: {(item.quantity * item.price).toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                                {/* ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á selectedOptionDetails) ... */}
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ</p>
                )}
            </div>
        );
    }

    return (
        <div
            className="container"
            style={{
                maxWidth: '1000px',
                margin: '20px auto',
                paddingTop: '120px',
            }}
        >
            <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>

            {orders.length === 0 && !isLoading ? (
                <p>‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
            ) : (
                <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
                    <thead>
                        <tr style={{ backgroundColor: '#f2f2f2' }}>
                            <th style={{ padding: '10px', border: '1px solid #ddd', textAlign: 'left' }}>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                            <th style={{ padding: '10px', border: '1px solid #ddd', textAlign: 'left' }}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                            <th style={{ padding: '10px', border: '1px solid #ddd', textAlign: 'left' }}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th>
                            <th style={{ padding: '10px', border: '1px solid #ddd', textAlign: 'left' }}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å</th>
                            <th style={{ padding: '10px', border: '1px solid #ddd', textAlign: 'left' }}>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</th>
                            <th style={{ padding: '10px', border: '1px solid #ddd', textAlign: 'left' }}>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                        </tr>
                    </thead>
                    <tbody>
                        {orders.map(order => {
                            // *** üö©‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏™‡πà‡∏á order.verification_status ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ***
                            const verificationText = getVerificationStatusText(order.status, order.verification_status);

                            return (
                                <tr key={order.id} style={{ border: '1px solid #ddd' }}>
                                    <td style={{ padding: '10px', border: '1px solid #ddd' }}>{order.id.substring(0, 8)}...</td>
                                    <td style={{ padding: '10px', border: '1px solid #ddd' }}>{new Date(order.created_at).toLocaleDateString()}</td>
                                    <td style={{ padding: '10px', border: '1px solid #ddd' }}>{order.total_amount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</td>
                                    <td style={{ padding: '10px', border: '1px solid #ddd' }}>{order.status}</td>
                                    <td style={{ padding: '10px', border: '1px solid #ddd' }}>{verificationText}</td> {/* <--- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ */}
                                    <td style={{ padding: '10px', border: '1px solid #ddd' }}>
                                        <button onClick={() => handleViewDetails(order.id)} style={{ padding: '5px 10px', cursor: 'pointer' }}>
                                            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                        </button>
                                    </td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            )}
        </div>
    );
}

export default OrderTrackingPage;